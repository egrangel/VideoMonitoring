unit TestServices.Servers;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, FireDAC.Stan.Option, Data.Bind.ObjectScope, FireDAC.DApt.Intf,
  FireDAC.DatS, FireDAC.Stan.Def, FireDAC.VCLUI.Wait, FireDAC.Stan.Param,
  System.Classes, REST.Client, FireDAC.ConsoleUI.Wait, FireDAC.Stan.Intf,
  FireDAC.Stan.Error, System.SysUtils, Ragna, FireDAC.Phys.Intf, FireDAC.Comp.Client,
  System.JSON, FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs, FireDAC.Phys,
  FireDAC.Stan.Pool, Services.Servers, FireDAC.Stan.Async, FireDAC.DApt,
  FireDAC.Phys.SQLite, FireDAC.UI.Intf, Data.DB, Data.Bind.Components,
  FireDAC.Comp.DataSet, REST.Types, Horse, Providers.Connection;

type
  // Test methods for class TServiceServers

  TestTServiceServers = class(TTestCase)
  strict private
    FServiceServers: TServiceServers;
    FServerGUID: String;
    FServerInput,
    FServerOutput: TJSONObject;

    procedure CreateTables;
    function InsertData(ServerInput: TJSONObject): TFDQuery;
  private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestPost;
    procedure TestGet;
  end;

implementation

procedure TestTServiceServers.CreateTables;
var
  qry: TFDQuery;
begin
  qry := TFDQuery.Create(nil);
  qry.Connection := FServiceServers.FDConnection;
  qry.SQL.Add('CREATE TABLE Servers (');
  qry.SQL.Add('	Id TEXT(40) NOT NULL PRIMARY KEY,');
  qry.SQL.Add('	Name TEXT(200),');
  qry.SQL.Add('	Ip TEXT(40),');
  qry.SQL.Add('	Port INTEGER)');
  qry.ExecSQL;

  qry.SQL.Clear;
  qry.SQL.Add('CREATE TABLE Videos (');
  qry.SQL.Add('	Id TEXT(40) NOT NULL PRIMARY KEY,');
  qry.SQL.Add('	VideoId TEXT(40),');
  qry.SQL.Add('	ServerId TEXT(40),');
  qry.SQL.Add('	Description TEXT(200),');
  qry.SQL.Add('	SizeInBytes INTEGER,');
  qry.SQL.Add('	Content BLOB,');
  qry.SQL.Add('	DateInsert datetime default current_timestamp,');
  qry.SQL.Add('	CONSTRAINT videos_FK FOREIGN KEY (serverid) REFERENCES servers(id)');
  qry.SQL.Add(');');
  qry.ExecSQL;
end;

function TestTServiceServers.InsertData(ServerInput: TJSONObject): TFDQuery;
begin
  ServerInput.AddPair('id',FServerGuid);
  ServerInput.AddPair('name','Servidor Test 1');
  ServerInput.AddPair('ip','127.0.0.1');
  ServerInput.AddPair('port','9000');

  Result := FServiceServers.Post(ServerInput);
end;

procedure TestTServiceServers.SetUp;
begin
  FServerGUID := '{7E9FF805-D639-4EBF-93B5-6D6AE526CCCE}';
  FServerInput := TJSONObject.Create;
  FServerOutput := TJSONObject.Create;
  FServiceServers := TServiceServers.Create(nil);
  FServiceServers.FDConnection.Params.Database := ':memory:';
  CreateTables;
end;

procedure TestTServiceServers.TearDown;
begin
  FreeAndNil(FServerOutput);
  FreeAndNil(FServerInput);
  FreeAndNil(FServiceServers);
end;

procedure TestTServiceServers.TestPost;
begin
  FServerOutput := InsertData(FServerInput).ToJSONObject;

  CheckEquals(FServerInput.GetValue('id').ToString,FServerOutPut.GetValue('id').ToString,'Server not included');
end;

procedure TestTServiceServers.TestGet;
begin
  InsertData(FServerInput);

  FServerOutput := FServiceServers.Get(EmptyStr).ToJSONObject;

  Check(FServerOutput.Count > 0,'Did''nt get server list');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTServiceServers.Suite);
end.

